<?php

require_once('lib/includes.php');

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-19 at 23:22:50.
 * @group binarybeast
 * @group library
 * @group all
 */
class BinaryBeastTest extends bb_test_case {

    /**
     * @var BinaryBeast
     */
    protected $object;

    protected function setUp() {
        $this->object = &$this->bb;
    }

    /**
     * @covers BinaryBeast::login
     * @todo   Implement testLogin().
     */
    public function testLogin() {
        $this->assertTrue($this->object->login('APITester@binarybeast.com', 'password', true), 'Email/Password login failed');
        //Only testing, keep using the api key as it is the standard
        $this->object->login(null, null, false);
    }

    /**
     * @covers BinaryBeast::test_login
     * @todo   Implement testTest_login().
     */
    public function testTest_login() {
        $this->assertTrue($this->object->test_login(), 'API Key Login failed');
    }

    /**
     * @covers BinaryBeast::disable_ssl_verification
     */
    public function testDisable_ssl_verification() {
        $this->object->disable_ssl_verification();
        $this->assertFalse($this->object->ssl_verification());
    }

    /**
     * @covers BinaryBeast::ssl_verification
     */
    public function testSsl_verification() {
        $this->object->disable_ssl_verification();
        $this->assertFalse($this->object->ssl_verification());
    }

    /**
     * @covers BinaryBeast::enable_ssl_verification
     * @todo   Implement testEnable_ssl_verification().
     */
    public function testEnable_ssl_verification() {
        $this->object->enable_ssl_verification();
        $this->assertTrue($this->object->ssl_verification());
        //Keep it disabled
        $this->object->disable_ssl_verification();
    }

    /**
     * @covers BinaryBeast::call
     */
    public function testCall() {
        $this->assertServiceListSuccessful($this->object->call('Tourney.TourneyList.Creator', array('page_size' => 1)));
    }

    /**
     * @covers BinaryBeast::tournament
     */
    public function testTournament() {
        $this->assertInstanceOf('BBTournament', $this->object->tournament, '$this->object->tournament did not return a new BBTournament');
        $this->assertInstanceOf('BBTournament', $this->object->tournament(), '$this->object->tournament() did not return a new BBTournament');
    }

    /**
     * @covers BinaryBeast::team
     */
    public function test_team() {
        $this->assertInstanceOf('BBTeam', $this->object->team, '$this->object->team did not return a new BBTeam');
        $this->assertInstanceOf('BBTeam', $this->object->team(), '$this->object->team() did not return a new BBTeam');
    }

    /**
     * @covers BinaryBeast::match
     */
    public function testMatch() {
        $this->assertInstanceOf('BBMatch', $this->object->match, '$this->object->match did not return a new BBMatch');
        $this->assertInstanceOf('BBMatch', $this->object->match(), '$this->object->match() did not return a new BBMatch');
    }

    /**
     * @covers BinaryBeast::match
     */
    public function test_match_game() {
        $this->assertInstanceOf('BBMatchGame', $this->object->match_game, '$this->object->match_game did not return a new BBMatchGame');
        $this->assertInstanceOf('BBMatchGame', $this->object->match_game(), '$this->object->match_game() did not return a new BBMatchGame');
    }

    /**
     * @covers BinaryBeast::map
     */
    public function testMap() {
        $this->assertInstanceOf('BBMap', $this->object->map, '$this->object->map did not return a new BBMap');
        $this->assertInstanceOf('BBMap', $this->object->map(), '$this->object->map() did not return a new BBMap');
    }

    /**
     * @covers BinaryBeast::country
     */
    public function testCountry() {
        $this->assertInstanceOf('BBCountry', $this->object->country, '$this->object->country did not return a new BBCountry');
        $this->assertInstanceOf('BBCountry', $this->object->country(), '$this->object->country() did not return a new BBCountry');
    }

    /**
     * @covers BinaryBeast::game
     */
    public function testGame() {
        $this->assertInstanceOf('BBGame', $this->object->game, '$this->object->game did not return a new BBGame');
        $this->assertInstanceOf('BBGame', $this->object->game(), '$this->object->game() did not return a new BBGame');
    }

    /**
     * @covers BinaryBeast::race
     */
    public function testRace() {
        $this->assertInstanceOf('BBRace', $this->object->race, '$this->object->game did not return a new BBRace');
        $this->assertInstanceOf('BBRace', $this->object->race(), '$this->object->game() did not return a new BBRace');
    }

}
