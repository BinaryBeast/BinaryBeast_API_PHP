<?php

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-02-20 at 03:17:55.
 * @group legacy
 * @group library
 * @group all
 */
class BBLegacyTest extends bb_test_case {

    /**
     * @var BBLegacy
     */
    protected $object;
    
    private static $static_id;
    private $id;
    //
    private static $static_team_id;
    private $team_id;
    //
    private static $static_opponent_id;
    private $opponent_id;
    //
    private static $static_match_id;
    private $match_id;

    function __construct($name = NULL, array $data = array(), $dataName = '') {
        parent::__construct($name, $data, $dataName);
        $this->object = &$this->bb;
    }
    
    private function get_id() {
        $this->id = self::$static_id;
        if(is_null($this->id)) $this->testTournament_create();
        return $this->id;
    }
    private function get_team_id() {
        $this->team_id = self::$static_team_id;
        if(is_null($this->team_id)) $this->testTeam_insert();
        return $this->team_id;
    }
    private function get_match_id() {
        $this->match_id = self::$static_match_id;
        if(is_null($this->match_id)) $this->testTeam_report_win();
        return $this->match_id;
    }
    private function get_opponent_id() {
        $this->opponent_id = self::$static_opponent_id;
        if(is_null($this->opponent_id)) $this->testTeam_get_opponent();
        return $this->opponent_id;
    }

    /**
     * @covers BBLegacy::tournament_list
     * @todo   Implement testTournament_list().
     */
    public function testTournament_list_my() {
        $this->assertServiceListSuccessful($this->object->tournament_list_my(null, 1));
    }

    /**
     * @covers BBLegacy::tournament_create
     */
    public function testTournament_create() {
        //not sure why but it seems to run the same test over and over again... wtf?? :(
        $result = $this->object->tournament_create(array('title' => 'API Unit Test Tournament', 'game_code' => 'HotS'));
        $this->assertServiceSuccessful($result);
        $this->id = $result->tourney_id;
        self::$static_id = $this->id;
    }

    /**
     * @covers BBLegacy::tournament_load
     */
    public function testTournament_load() {
        $id = $this->get_id();

        $result = $this->object->tournament_load($id);
        $this->assertServiceSuccessful($result);
        $this->assertObjectFormat($result->tourney_info, array('title', 'tourney_id', 'game_code', 'game', 'type_id', 'status', 'date_start'));
    }

    /**
     * @covers BBLegacy::tournament_update
     */
    public function testTournament_update() {
        $id = $this->get_id();
        $result = $this->object->tournament_update($id, array('description' => 'Upating description, and max_teams to 128', 'max_teams' => 128));
        $this->assertServiceSuccessful($result);
    }
    
    /**
     * @covers BBLegacy::tournament_round_update
     */
    public function testTournament_round_update() {
        $result = $this->object->tournament_round_update($this->get_id(), BinaryBeast::BRACKET_WINNERS, 0, 3, 'Shakuras Plateau');
        $this->assertServiceSuccessful($result);
    }
    
    /**
     * @covers BBLegacy::tournament_round_update_batch
     */
    public function testTournament_round_update_batch() {
        $best_ofs = array(1, 3, 3, 5);
        $maps     = array("Tal'Darim Altar", 'The Shattered Temple', "Xel'Naga Caverns", 'Metalopolis');
        $dates    = array('Today', 'Tomorrow', 'canceled!');

        $this->assertServiceSuccessful($this->object->tournament_round_update_batch($this->get_id(), BinaryBeast::BRACKET_LOSERS, $best_ofs, $maps, $dates));
    }

    /**
     * @covers BBLegacy::tournament_confirm
     * @todo   Implement testTournament_confirm().
     */
    public function testTournament_confirm() {
        $this->assertServiceSuccessful($this->object->tournament_confirm($this->get_id()));
    }

    /**
     * @covers BBLegacy::tournament_unconfirm
     * @todo   Implement testTournament_unconfirm().
     */
    public function testTournament_unconfirm() {
        $this->assertServiceSuccessful($this->object->tournament_unconfirm($this->get_id()));
    }

    /**
     * @covers BBLegacy::team_insert
     */
    public function testTeam_insert() {
        $result = $this->object->team_insert($this->get_id(), 'new team', array('country_code' => 'NOR'));
        $this->assertServiceSuccessful($result);
        $this->team_id = $result->tourney_team_id;
        self::$static_team_id = $this->team_id;

        $this->assertServiceSuccessful($this->object->team_insert($this->get_id(), 'Player 0'));
        $this->assertServiceSuccessful($this->object->team_insert($this->get_id(), 'Player 1'));
        $this->assertServiceSuccessful($this->object->team_insert($this->get_id(), 'Player 2'));
        $this->assertServiceSuccessful($this->object->team_insert($this->get_id(), 'Player 3'));
        $this->assertServiceSuccessful($this->object->team_insert($this->get_id(), 'Player 4'));
        $this->assertServiceSuccessful($this->object->team_insert($this->get_id(), 'Player 5'));
        $this->assertServiceSuccessful($this->object->team_insert($this->get_id(), 'Player 6'));
    }
    /**
     * @covers BBLegacy::team_update
     */
    public function testTeam_update() {
        $this->assertServiceSuccessful($this->object->team_update($this->get_team_id(), array('display_name' => 'Player 7 - renamed', 'status' => 1)));
    }
    /**
     * @covers BBLegacy::team_unconfirm
     */
    public function testTeam_unconfirm() {
        $this->assertServiceSuccessful($this->object->team_unconfirm($this->get_team_id()));
    }
    /**
     * @covers BBLegacy::team_confirm
     */
    public function testTeam_confirm() {
        $this->assertServiceSuccessful($this->object->team_confirm($this->get_team_id()));
    }    
    /**
     * @covers BBLegacy::team_ban
     */
    public function testTeam_ban() {
        $result = $this->object->team_insert($this->get_id(), 'team to ban');
        $this->assertServiceSuccessful($this->object->team_ban($result->tourney_team_id));
    }
    /**
     * @covers BBLegacy::team_delete
     */
    public function testTeam_delete() {
        $result = $this->object->team_insert($this->get_id(), 'team to delete');
        $this->assertServiceSuccessful($this->object->team_delete($result->tourney_team_id));
    }

    /**
     * @covers BBLegacy::tournament_start
     */
    public function testTournament_start() {
        $this->assertServiceSuccessful($this->object->tournament_start($this->get_id()));
    }


    /**
     * @covers BBLegacy::team_get_opponent
     */
    public function testTeam_get_opponent() {
        $result = $this->object->team_get_opponent($this->get_team_id());
        $this->assertServiceSuccessful($result);
        $this->opponent_id = $result->o_tourney_team_id;
        self::$static_opponent_id = $this->opponent_id;
    }
    /**
     * @covers BBLegacy::team_load
     */
    public function testTeam_load() {
        $result = $this->object->team_load($this->get_team_id());
        $this->assertServiceSuccessful($result);
        $this->assertObjectFormat($result->team_info, array('display_name', 'tourney_team_id', 'network_display_name'));
    }

    /**
     * @covers BBLegacy::team_report_win
     */
    public function testTeam_report_win() {
        $result = $this->object->team_report_win($this->get_id(), $this->get_team_id());
        $this->assertServiceSuccessful($result);
        $this->match_id = $result->tourney_match_id;
        self::$static_match_id = $this->match_id;
    }
    /**
     * @covers BBLegacy::match_report_games
     * @todo   Implement testMatch_report_games().
     */
    public function testMatch_report_games() {
        //Array pointing to the winner of each match, $tourney_team_id wins first game, $o_tourney_team_id wins second, and $tourney_team_id takes the 3rd
        $winners = array($this->get_team_id(), $this->get_opponent_id(), $this->get_team_id());

        //Even though this is StarCraft 2 and we don't need scores, I'm reporting just so you can see the result
        $scores = array(15, 9001, 9);
        //The loser built zealots vs carriers game 2.. so he's l337 * -1
        $o_scores = array(3, -1337, 8);

        //Let's define the map each game was played on
        //if you spell it correclty and we happen to have your map, an image will be drawn for it (see the 3rd map)
        $maps = array('First Map', 'Second Map', 'Metalopolis');
        
        $this->assertServiceSuccessful($this->object->match_report_games($this->get_match_id(), $winners, $scores, $o_scores, $maps));
    }
    
    /**
     * @covers BBLegacy::tournament_get_open_matches
     */
    public function testTournament_get_open_matches() {
        $this->assertServiceListSuccessful($this->object->tournament_get_open_matches($this->get_id()), 'matches');
    }

    
    /**
     * @covers BBLegacy::tournament_reopen
     */
    public function testTournament_reopen() {
        $this->assertServiceSuccessful($this->object->tournament_reopen($this->get_id()));
    }

    /**
     * @covers BBLegacy::tournament_delete
     */
    public function testTournament_delete() {
        $this->assertServiceSuccessful($this->object->tournament_delete($this->get_id()));
    }
    
    
    


    /**
     * @covers BBLegacy::map_list
     */
    public function testMap_list() {
        $result = $this->object->map_list('SC2');
        $this->assertServiceListSuccessful($result);
        $this->assertListFormat($result->list, array('map', 'map_id'));
    }
    /**
     * @covers BBLegacy::game_search
     */
    public function testGame_search() {
        $result = $this->object->game_search('star');
        $this->assertServiceListSuccessful($result, 'games');
        $this->assertListFormat($result->games, array('game', 'game_code'));
    }
    /**
     * @covers BBLegacy::game_list_top
     */
    public function testGame_list_top() {
        $result = $this->object->game_list_top(1);
        $this->assertServiceListSuccessful($result, 'games');
        $this->assertListFormat($result->games, array('game', 'game_code'));
    }
    /**
     * @covers BBLegacy::country_search
     * @todo   Implement testCountry_search().
     */
    public function testCountry_search() {
        $result = $this->object->country_search('united');
        $this->assertServiceListSuccessful($result, 'countries');
        $this->assertListFormat($result->countries, array('country', 'country_code', 'country_code_short'));
    }

}
